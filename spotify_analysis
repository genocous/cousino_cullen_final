import sqlite3
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import pandas as pd

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('vader_lexicon')

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

conn = sqlite3.connect('tracks.db')
cursor = conn.cursor()

genre_keywords = ['pop', 'rap', 'hip hop', 'alt', 'country', 'indie', 'r&b']

genre_words = {keyword: [] for keyword in genre_keywords}

cursor.execute('SELECT id, name, genre FROM tracks')
data = cursor.fetchall()

# Want to make a new SQLite df sharing id with tracks, but including sentiment analysis results (using pandas df for now instead)
new_df = pd.DataFrame(columns=['id','title','genre','neg','neu','pos','compound'])

for row in data:
    song_id, title, genre = row
    tokens = word_tokenize(title.lower())  

    if genre:
        for keyword in genre_keywords:
            if keyword in genre.lower():
                if sia.polarity_scores(' '.join(tokens))['compound']:
                  new_df.loc[len(new_df.index)] = [song_id, title, keyword, sia.polarity_scores(' '.join(tokens))['neg'], sia.polarity_scores(' '.join(tokens))['neu'],sia.polarity_scores(' '.join(tokens))['pos'], sia.polarity_scores(' '.join(tokens))['compound']] 

# there are some duplicates in the df which is okay since we want them to be counted for both listed genres

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (15, .8 * len(new_df['genre'].unique()))
plt.figure(figsize=figsize)
sns.boxplot(new_df, y='genre', x='compound', palette='BrBG', showmeans=True, meanprops={"marker":"x","markeredgecolor":"black","markersize":"10"})
sns.despine(top=True, right=True, bottom=True, left=True)

plt.show()
