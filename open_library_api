import random
import sqlite3
import requests
from langdetect import detect

conn = sqlite3.connect('title_analysis.db')
c = conn.cursor()

def create_table():
    c.execute('CREATE TABLE IF NOT EXISTS books (id INTEGER PRIMARY KEY, title varchar(255), genre varchar(255))')


def fetch_books():
    insert_statement = 'INSERT INTO books (title, genre) VALUES (?, ?)'
    subjects = ['fantasy', 'historical fiction', 'horror', 'mystery', 'romance', 'science fiction', 'thriller']

    total_books = 25  # Set the total number of books you want
    books_added = 0

    

    while books_added < total_books:
        subject = random.choice(subjects)  # Randomly select a subject from the list
        random_offset = random.randint(0, 100000)  # Adjust the range based on your needs
        offset = random_offset

        response = requests.get(f"https://openlibrary.org/subjects/{subject}.json?limit=1&offset={offset}")

        try:
            response.raise_for_status()  # Check if the request was successful
            works = response.json().get('works', [])
            for work in works:
                title = work.get('title', '')
                try:
                    if detect(title) == 'en':
                        c.execute(insert_statement, (title, subject))
                        books_added += 1
                except:
                    print("Error detecting language for title:", title)
        except requests.exceptions.HTTPError as errh:
            print("HTTP Error:", errh)
            break
        except requests.exceptions.ConnectionError as errc:
            print("Error Connecting:", errc)
            break
        except requests.exceptions.Timeout as errt:
            print("Timeout Error:", errt)
            break
        except requests.exceptions.RequestException as err:
            print("Error:", err)
            break

        if not works:
            continue  # Skip to the next iteration if there are no works for the subject
        
        offset += 1  # Increase the offset by 1 for each iteration

    conn.commit()

create_table()
fetch_books()

conn.commit()
conn.close()
