import sqlite3
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from textblob import TextBlob
import pandas as pd

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('vader_lexicon')

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

from matplotlib import pyplot as plt
import seaborn as sns

sia = SentimentIntensityAnalyzer()

conn = sqlite3.connect('books.db')
cursor = conn.cursor()

genre_keywords = ['film','music','fantasy','historical_fiction','horror','humor','science_fiction','young_adult']

genre_words = {keyword: [] for keyword in genre_keywords}

cursor.execute('SELECT id, title, genre FROM books')
data = cursor.fetchall()

new_df = pd.DataFrame(columns=['id','title','genre','neg','neu','pos','compound'])

for row in data:
    song_id, title, genre = row
    tokens = word_tokenize(title.lower())  

    if genre:
        for keyword in genre_keywords:
            if keyword in genre.lower():
                if sia.polarity_scores(' '.join(tokens))['compound']:
                  new_df.loc[len(new_df.index)] = [song_id, title, keyword, sia.polarity_scores(' '.join(tokens))['neg'], sia.polarity_scores(' '.join(tokens))['neu'],sia.polarity_scores(' '.join(tokens))['pos'], sia.polarity_scores(' '.join(tokens))['compound']] 

figsize = (15, .8 * len(new_df['genre'].unique()))
plt.figure(figsize=figsize)
sns.boxplot(new_df, y='genre', x='compound', palette='Purples', showmeans=True, meanprops={"marker":"x","markeredgecolor":"black","markersize":"10"}).set(title="Sentiment Analysis of Book Titles by Genre")
sns.despine(top=True, right=True, bottom=True, left=True)

plt.show()
