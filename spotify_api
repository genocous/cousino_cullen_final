import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import sqlite3

# Set up Spotify API credentials
client_id = "5af19f5cce964fe194f7caf977d8e540"
client_secret = "b762b059cd7a42a69bc8f1fc0ea36f9c"

# Set up Spotify API client
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

conn = sqlite3.connect('title_analysis.db')
c = conn.cursor()

def setup_table():
    
    # Create table if it doesn't exist
    c.execute('CREATE TABLE IF NOT EXISTS tracks (id INTEGER PRIMARY KEY, name varchar(255), genre varchar(255))')

def get_tracks():
    # Set up initial search parameters
    limit = 5
    total_tracks = 5  # Update to the total number of tracks you want to add

    # Search for tracks
    for year in range(2018, 2023):
        offset = 0  # Reset offset for each year
        count = c.execute('SELECT COUNT(*) FROM tracks').fetchone()[0]

        while offset < total_tracks:
            results = sp.search(q=f'year:{year}', type='track', limit=limit, offset=offset)

            # Process tracks
            for track in results['tracks']['items']:

                # Make sure the track title is not in the database already
                if c.execute('SELECT * FROM tracks WHERE name=?', (track['name'],)).fetchone():
                    continue

                track_name = track['name']
                count += 1
                # Get genre from the first artist of the track
                artist = sp.artist(track['artists'][0]['id'])
                genre = artist['genres'][0] if artist['genres'] else None

                # Store track in the database
                c.execute('INSERT INTO tracks VALUES (?, ?, ?)', (count, track_name, genre))

            # Increase offset for the next batch of tracks
            offset += limit

    # Commit database changes (moved outside the loop to commit once after all iterations)
    conn.commit()


# Call functions
setup_table()
get_tracks()


# Commit database changes and close connection
conn.commit()
conn.close()

