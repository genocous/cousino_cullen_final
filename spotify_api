import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import sqlite3
import random

# Set up Spotify API credentials
client_id = "5af19f5cce964fe194f7caf977d8e540"
client_secret = "b762b059cd7a42a69bc8f1fc0ea36f9c"

# Set up Spotify API client
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

conn = sqlite3.connect('title_analysis.db')
c = conn.cursor()

def create_table():
    c.execute('CREATE TABLE IF NOT EXISTS tracks (id INTEGER PRIMARY KEY, name varchar(255), genre varchar(255))')

def fetch_tracks():
    limit = 5
    total_tracks = 25  # Set the desired total number of tracks
    insert_statement = 'INSERT INTO tracks (name, genre) VALUES (?, ?)'

    fetched_tracks = set()

    # Fetch already stored tracks from the database
    stored_tracks = set(c.execute('SELECT name FROM tracks').fetchall())

    years = list(range(2018, 2023))
    random.shuffle(years)

    for year in years:
        offset = 0

        while len(fetched_tracks) < total_tracks and offset < total_tracks:
            response = sp.search(q=f'year:{year}', type='track', limit=limit, offset=offset)
            tracks = response['tracks']['items']

            for track in tracks:
                track_name = track['name']

                if track_name in fetched_tracks or track_name in stored_tracks:
                    continue

                fetched_tracks.add(track_name)

                # Get genre from the first artist of the track
                artist = sp.artist(track['artists'][0]['id'])
                genre = artist['genres'][0] if artist['genres'] else None

                c.execute(insert_statement, (track_name, genre))

            offset += limit

            # If we reach the end of the results, break to the next year
            if len(tracks) < limit:
                break

        # If we've fetched enough tracks, break from the outer loop
        if len(fetched_tracks) >= total_tracks:
            break

    conn.commit()

# Call functions
create_table()
fetch_tracks()

# Commit database changes and close connection
conn.commit()
conn.close()
